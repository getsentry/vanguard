# Yes, this is a nightmare to understand.
# https://cloud.google.com/sql/docs/postgres/connect-build
steps:
  - id: Build Container
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - "--no-cache"
      - "--build-arg"
      - VERSION=${COMMIT_SHA}
      - "--build-arg"
      - SENTRY_AUTH_TOKEN=$_SENTRY_AUTH_TOKEN
      - "--build-arg"
      - SENTRY_ORG=$_SENTRY_ORG
      - "--build-arg"
      - SENTRY_PROJECT=$_SENTRY_PROJECT
      - "-t"
      - "${_IMAGE_NAME}:${COMMIT_SHA}"
      - "-t"
      - "${_IMAGE_NAME}:latest"
      - .
      - "-f"
      - Dockerfile
  - id: Publish Container
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - "${_IMAGE_NAME}:${COMMIT_SHA}"
  - id: Build SQL Proxy
    name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "FROM ${_IMAGE_NAME}:${COMMIT_SHA}
        COPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy
        WORKDIR /app" > Dockerfile-proxy

        docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy .
  - id: "Run Database Migrations"
    name: "${_IMAGE_NAME}-proxy"
    env:
      - "DATABASE_NAME=${_DATABASE_NAME}"
      - "DATABASE_USER=${_DATABASE_USER}"
      - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
      - "DATABASE_TYPE=${_DATABASE_TYPE}"
    secretEnv:
      - DATABASE_PASS
      - DATABASE_URL
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        /cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME} -dir=/cloudsql & sleep 2

        npx prisma migrate deploy
        # npx prisma db seed
  - id: Deploy
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "$_SERVICE_NAME"
      - "--image"
      - "${_IMAGE_NAME}:${COMMIT_SHA}"
      - "--region"
      - "${_DEPLOY_REGION}"
      - "--quiet"
images:
  - "${_IMAGE_NAME}:${COMMIT_SHA}"
options:
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _DEPLOY_REGION: us-central1
  _GCR_HOSTNAME: us-central1-docker.pkg.dev
  _IMAGE_NAME: "${_GCR_HOSTNAME}/${PROJECT_ID}/${REPO_NAME}/${_SERVICE_NAME}"
  _PLATFORM: managed
  _SERVICE_NAME: vanguard
  _LABELS: gcb-trigger-id=0adfe4c3-820f-4b35-8493-0f97b7572bf2
  _TRIGGER_ID: 0adfe4c3-820f-4b35-8493-0f97b7572bf2
  # probably should be in sentry's specific gcp instance, but its fine
  _DATABASE_USER: vanguard
  _DATABASE_NAME: vanguard
  _INSTANCE_CONNECTION_NAME: ${PROJECT_ID}:us-central1:vanguard-prod
  _DATABASE_PORT: "5432"
  _DATABASE_TYPE: postgres
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/postgres_password/versions/latest
      env: DATABASE_PASS
    - versionName: projects/$PROJECT_ID/secrets/database_url/versions/latest
      env: DATABASE_URL
tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - vanguard
