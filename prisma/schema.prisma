// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(cuid())
  passwordHash         String?            @db.VarChar(255)
  externalId           String?            @unique
  picture              String?
  email                String             @unique
  name                 String?
  posts                Post[]
  canPostRestricted    Boolean            @default(false)
  admin                Boolean            @default(false)
  notifyReplies        Boolean            @default(true)
  autoSubscribeComments Boolean           @default(false)
  PostComment          PostComment[]
  PostRevision         PostRevision[]
  PostReaction         PostReaction[]
  PostSubscription     PostSubscription[]
}

model Category {
  id            String          @id @default(cuid())
  name          String          @unique @db.VarChar(255)
  slug          String          @unique @db.VarChar(255)
  description   String?
  deleted       Boolean         @default(false)
  posts         Post[]
  postRevisions PostRevision[]
  restricted    Boolean         @default(false)
  slackConfig   CategorySlack[]
  emailConfig   CategoryEmail[]
  metaConfig    CategoryMeta[]
  colorHex      String?         @db.VarChar(7)
  allowComments Boolean         @default(true)
  defaultEmojis String[]
}

model CategorySlack {
  id         String   @id @default(cuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  webhookUrl String
  // overrides
  username   String?
  iconUrl    String?
  channel    String?
}

model CategoryEmail {
  id            String   @id @default(cuid())
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  to            String
  subjectPrefix String?
}

model CategoryMeta {
  id          String   @id @default(cuid())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  name        String   @db.VarChar(255)
  description String?
  required    Boolean  @default(false)
}

model Feed {
  id         String  @id @default(cuid())
  name       String  @unique
  restricted Boolean @default(false)
  deleted    Boolean @default(false)
  url        String?

  webhookUrl String?

  posts Post[]
}

model Post {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  publishedAt   DateTime? @default(now())
  updatedAt     DateTime  @updatedAt
  title         String    @db.VarChar(255)
  content       String?
  published     Boolean   @default(false)
  deleted       Boolean   @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  allowComments Boolean?  @default(true)

  revisions     PostRevision[]
  meta          PostMeta[]
  comments      PostComment[]
  reactions     PostReaction[]
  subscriptions PostSubscription[]
  feeds         Feed[]
}

model PostMeta {
  id      String @id @default(cuid())
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  name    String
  content String
}

model PostRevision {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  // revision details
  title      String?   @db.VarChar(255)
  content    String?
  categoryId String?
  Category   Category? @relation(fields: [categoryId], references: [id])
}

model PostReaction {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  emoji     String   @db.VarChar(8)

  @@unique([postId, authorId, emoji])
}

model PostComment {
  id        String        @id @default(cuid())
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  createdAt DateTime      @default(now())
  deleted   Boolean       @default(false)
  content   String
  parentId  String?
  parent    PostComment?  @relation("CommentChildren", fields: [parentId], references: [id])
  children  PostComment[] @relation("CommentChildren")
}

model PostSubscription {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}
